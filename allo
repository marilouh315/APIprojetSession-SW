                 const { compare } = require('bcrypt');
const postgres = require('../config/db');
const utilisateur = require('./utilisateurModels');
 
 
class ListeTachesUsager{
 
    static async RequeteafficherListeTacheIncomplete(cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
 
            let requete = "SELECT tache_id, titre, description, date_debut,date_echeance,complete,utilisateur_id FROM taches where complete = false AND utilisateur_id = $1";
            postgres.query(requete, [utilisateur_id], (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                   
                    resolve(resultats.rows);
                }
            });
        });
    }
 
    static async RequeteafficherListeTacheComplete(cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
 
            let requete = "SELECT tache_id, titre, description, date_debut,date_echeance,complete,utilisateur_id FROM taches WHERE utilisateur_id = $1";
            postgres.query(requete,[utilisateur_id], (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    resolve(resultats.rows);
                }
            });
        });
    }
 
    static async RequeteAfficherDetail(id, cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
            let requete = "SELECT t.tache_id, t.utilisateur_id,t.titre AS tache_titre, t.description AS tache_description, t.date_debut, t.date_echeance,st.sous_tache_id AS sous_tache_id, st.titre AS sous_tache_titre, st.complete AS sous_tache_complete FROM taches t JOIN sous_taches st ON t.tache_id = st.tache_id WHERE t.tache_id = $1 AND t.utilisateur_id = $2";
            postgres.query(requete, [id,utilisateur_id], (erreur, resultats) => {
                if (erreur) {
                    console.error(erreur);
                    reject(erreur);
                } else {
                    console.log(resultats.rows);
                    resolve(resultats.rows);
                }
            });
        }).catch((erreur) => {
           
            console.error("Erreur lors de l'exécution de la requête SQL:", erreur);
            throw new Error("Une erreur est survenue lors de la récupération des détails de la tâche.");
        });
    }
 
    static async RequeteAjouterTache(tache, cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
            let requete = "INSERT INTO taches (titre, description, date_debut, date_echeance, complete, utilisateur_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING titre, description, date_debut, date_echeance, complete";
 
            let params = [tache.titre, tache.description, tache.date_debut, tache.date_echeance, tache.complete, utilisateur_id];
 
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    let reponse = {titre: resultats.rows[0].titre, description: resultats.rows[0].description, date_debut: resultats.rows[0].date_debut, date_echeance: resultats.rows[0].date_echeance, complete: resultats.rows[0].complete};
                    resolve(reponse);
                }
            });
        });
    }
 
    static async RequeteModifierTache(tache,cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
            let requete = "UPDATE taches SET titre = $1, description = $2, date_debut = $3, date_echeance = $4 WHERE tache_id = $5 AND utilisateur_id = $6 RETURNING titre, description, date_debut, date_echeance";
 
            let params = [tache.titre, tache.description, tache.date_debut, tache.date_echeance, tache.tache_id, utilisateur_id];
 
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    let reponse = {titre: resultats.rows[0].titre, description: resultats.rows[0].description, date_debut: resultats.rows[0].date_debut, date_echeance: resultats.rows[0].date_echeance};
                    resolve(reponse);
                }
            });
        });
    }
 
    static async RequeteModifierStatusTache(tache,cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
            let requete = "UPDATE taches SET complete = $1 WHERE tache_id = $2 AND utilisateur_id = $3 RETURNING complete, tache_id";
 
            let params = [tache.complete, tache.tache_id, utilisateur_id];
 
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    let reponse = {tache_id: resultats.rows[0].tache_id, complete: resultats.rows[0].complete};
                    resolve(reponse);
                }
            });
        });
    }
 
    static async RequeteSupprimerTache(tache,cleApi) {
 
        const utilisateur_id = await ListeTachesUsager.ObtenirIdentifiantUsager(cleApi);
 
        return new Promise((resolve, reject) => {
            let requete = "DELETE FROM taches WHERE tache_id = $1 AND utilisateur_id = $2";
 
            let params = [tache.tache_id, utilisateur_id];
 
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    resolve(resultats);
                }
            });
        });
    }
 
    static RequeteAjouterSousTache(sousTache) {
 
        return new Promise((resolve, reject) => {
            let requete = "INSERT INTO sous_taches (tache_id, titre, complete) VALUES ($1, $2, $3) RETURNING tache_id, titre, complete";
 
            postgres.query(requete, sousTache, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    let reponse = {
                        tache_id: resultats.rows[0].tache_id,
                        titre: resultats.rows[0].titre,
                        complete: resultats.rows[0].complete
                    };
                    resolve(reponse);
                }
            });
        });
    }
 
    static RequeteModifierSousTache(sousTache) {
        return new Promise((resolve, reject) => {
            let requete = "UPDATE sous_taches SET titre = $1 WHERE sous_tache_id = $2 RETURNING titre, sous_tache_id";
            console.log(sousTache);
            postgres.query(requete, sousTache, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    let reponse = {sous_tache_id: resultats.rows[0].sous_tache_id, titre: resultats.rows[0].titre};
                    resolve(reponse);
                }
            });
        });
    }
 
    static RequeteModifierStatusSousTache(sousTache) {
        return new Promise((resolve, reject) => {
            let requete = "UPDATE sous_taches SET complete = $1 WHERE sous_tache_id = $2 RETURNING complete,sous_tache_id";
 
 
            postgres.query(requete, sousTache, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    let reponse = {sous_tache_id: resultats.rows[0].sous_tache_id,complete: resultats.rows[0].complete};
                    resolve(reponse);
                }
            });
        });
    }
 
    static RequeteSupprimerSousTache(sousTache) {
        return new Promise((resolve, reject) => {
            let requete = "DELETE FROM sous_taches WHERE sous_tache_id = $1";
 
 
            postgres.query(requete, sousTache, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    resolve(resultats);
                }
            });
        });
    }
 
    static verifierCle(cleApi) {
        return new Promise((resolve, reject) => {
            let requete = "SELECT * FROM utilisateur WHERE cle_api = $1";
            let params = [cleApi];
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    reject(erreur);
                } else {
                    if (resultats.rows.length === 0) {
                        resolve(false);
                    } else {
                        resolve(true);
                    }
                }
            });
        });
    }
   
    static ObtenirIdentifiantUsager(cleApi) {
        return new Promise((resolve, reject) => {
            let requete = "SELECT utilisateur_id FROM utilisateur WHERE cle_api = $1";
            let params = [cleApi];
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    resolve(resultats.rows[0].utilisateur_id);
                }
            });
        });
    }
 
    static VerifierUtilisateurTache(tache_id) {
        return new Promise((resolve, reject) => {
            let requete = "SELECT COUNT(*) AS count FROM taches WHERE tache_id = $1 AND utilisateur_id IS NOT NULL";
            let params = [tache_id];
   
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.log(erreur);
                    reject(erreur);
                } else {
                    const count = resultats.rows[0].count;
                    resolve(count > 0);
                }
            });
        });
    }
 
    static RecupererTacheId = (sous_tache_id) => {
        return new Promise((resolve, reject) => {
            let requete = "SELECT tache_id FROM sous_taches WHERE sous_tache_id = $1";
            let params = [sous_tache_id];
   
            postgres.query(requete, params, (erreur, resultats) => {
                if (erreur) {
                    console.error("Erreur lors de la récupération de la tâche ID :", erreur);
                    reject(erreur);
                } else {
                    if (resultats.rows.length === 0) {
                        resolve(null);
                    } else {
                       
                        resolve(resultats.rows[0].tache_id);
                    }
                }
            });
        });
    }
 
}
 
module.exports = ListeTachesUsager;                                                                                                                                                         Controller:                                                                                                                                                                                                               const listeTache = require('../models/ListeTacheModels');
 
 
exports.afficherListeTacheIncomplete = (req, res) => {
 
    const cleApi = req.headers.authorization.split(' ')[1];
 
    listeTache.RequeteafficherListeTacheIncomplete(cleApi)
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "Liste de tâche non trouvée." });
            }
           
            return res.status(200).json(resultats);
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la liste de tâches." });
        });
};
 
exports.afficherListeTacheComplete = (req, res) => {
 
    const cleApi = req.headers.authorization.split(' ')[1];
    listeTache.RequeteafficherListeTacheComplete(cleApi)
       
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "Liste de tâche non trouvée." });
            }
           
            return res.status(200).json(resultats);
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la liste de tâches." });
        });
}
 
exports.AfficherDetail = (req, res) => {
    const cleApi = req.headers.authorization.split(' ')[1];
 
    listeTache.RequeteAfficherDetail(req.params.id, cleApi)
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "Le détail d'une tâche n'est pas trouvé." });
            }
           
            return res.status(200).json(resultats);
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement du détail d'une tâche." });
        });
}
 
exports.AjouterTache = (req, res) => {
    const cleApi = req.headers.authorization.split(' ')[1];
 
    listeTache.RequeteAjouterTache(req.body, cleApi)
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "L'ajout d'une tâche n'est pas trouvé." });
            }
            return res.status(200).json(resultats);
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de l'ajout d'une tâche." });
        });
}
 
exports.ModifierTache = (req, res) => {
    const cleApi = req.headers.authorization.split(' ')[1];
 
    listeTache.RequeteModifierTache(req.body, cleApi)
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "La modification de la tâche n'est pas trouvé." });
            }
            return res.status(200).json(resultats);
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la modification d'une tâche." });
        });
}
 
exports.ModifierStatusTache = (req, res) => {
    const cleApi = req.headers.authorization.split(' ')[1];
 
    listeTache.RequeteModifierStatusTache(req.query, cleApi)
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "La modification du status de la tâche n'est pas trouvé." });
            }
            return res.status(200).json(resultats);
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la modification du status d'une tâche." });
        });
}
 
exports.SupprimerTache = (req, res) => {
    const cleApi = req.headers.authorization.split(' ')[1];
 
    listeTache.RequeteSupprimerTache(req.query, cleApi)
        .then((resultats) => {
            if (!resultats || resultats.length === 0) {
                return res.status(404).json({ message: "La supression de la tâche n'est pas trouvé." });
            }
            return res.status(200).json({ message: "La tâche a été supprimée avec succès."});
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la suppression d'une tâche." });
 
        });
}
 
exports.AjouterSousTache = (req, res) => {
    let tache_id = req.body.tache_id;
 
 
    listeTache.VerifierUtilisateurTache(tache_id)
        .then((utilisateurBool) => {
 
 
            if (!utilisateurBool) {
                return res.status(403).json({ message: "La tâche n'a pas d'utilisateur associé." });
            }
 
            let params = [tache_id, req.body.titre, req.body.complete];
            listeTache.RequeteAjouterSousTache(params)
            .then((resultats) => {
                if (!resultats || resultats.length === 0) {
                    return res.status(404).json({ message: "L'ajout d'une sous-tâche n'a pas été trouvé." });
                }
                return res.status(200).json(resultats);
            })
        })
        .catch((erreur) => {
 
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de l'ajout d'une sous-tâche." });
        });
}
 
exports.ModifierSousTache = (req, res) => {
 
    let sous_tache_id = req.body.sous_tache_id;
    listeTache.RecupererTacheId(sous_tache_id)
        .then((tache_id) => {
 
 
            if (!tache_id) {
 
                return res.status(404).json({ message: "La sous-tâche spécifiée n'existe pas." });
            }
 
            listeTache.VerifierUtilisateurTache(tache_id)
            .then((utilisateurBool) => {
 
                if (!utilisateurBool) {
   
                    return res.status(403).json({ message: "La tâche n'a pas d'utilisateur associé." });
                }
   
                let params = [req.body.titre, sous_tache_id];
   
                listeTache.RequeteModifierSousTache(params)
                .then((resultats) => {
 
                    if (!resultats || resultats.length === 0) {
       
                        return res.status(404).json({ message: "La modification d'une sous tâche n'est pas trouvé." });
                    }
                    return res.status(200).json(resultats);
                })
            })
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la modification d'une sous tâche." });
        });
}
 
exports.ModifierStatusSousTache = (req, res) => {
 
    let sous_tache_id = req.query.sous_tache_id;
 
 
    listeTache.RecupererTacheId(sous_tache_id)
        .then((tache_id) => {
           
            if (!tache_id) {
                return res.status(404).json({ message: "La sous-tâche spécifiée n'existe pas." });
            }
 
            listeTache.VerifierUtilisateurTache(tache_id)
            .then((utilisateurBool) => {
                if (!utilisateurBool) {
                    return res.status(403).json({ message: "La tâche n'a pas d'utilisateur associé." });
                }
   
                let params = [req.query.complete, sous_tache_id];
                listeTache.RequeteModifierStatusSousTache(params)
                .then((resultats) => {
                    if (!resultats || resultats.length === 0) {
                        return res.status(404).json({ message: "La modification du status d'une sous tâche n'est pas trouvé." });
                    }
                    return res.status(200).json(resultats);
                })
            })
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la modification du status d'une sous tâche." });
        });
}
 
exports.SupprimerSousTache = (req, res) => {
 
    let sous_tache_id = req.query.sous_tache_id;
 
    listeTache.RecupererTacheId(sous_tache_id)
        .then((tache_id) => {
 
 
            if (!tache_id) {
 
                return res.status(404).json({ message: "La sous-tâche spécifiée n'existe pas." });
            }
 
            listeTache.VerifierUtilisateurTache(tache_id)
            .then((utilisateurBool) => {
                if (!utilisateurBool) {
                    return res.status(403).json({ message: "La tâche n'a pas d'utilisateur associé." });
                }
   
                let params = [sous_tache_id];
                listeTache.RequeteSupprimerSousTache(params)
                .then((resultats) => {
                    if (!resultats || resultats.length === 0) {
                        return res.status(404).json({ message: "Suppression d'une sous tâche n'est pas trouvé." });
                    }
                    return res.status(200).json({ message: "La sous tâche a été supprimée avec succès."});
                })
            })
        })
        .catch((erreur) => {
            if (erreur instanceof SyntaxError) {
                return res.status(400).json({ message: "La syntaxe de la requête est incorrecte." });
            }
            return res.status(500).json({ message: "Une erreur est survenue lors du traitement de la suppression d'une sous tâche." });
        });
}